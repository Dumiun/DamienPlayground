
@using DamienPlayground.Data
@using DamienPlaygroundLibrary.Data
@using DamienPlaygroundLibrary.Models
@using Microsoft.AspNetCore.Identity
@inject IMemberData memberData
@inject UserManager<ApplicationUser> UserManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
     <MudPaper Elevation="2" Class="pa-4 ma-2 mb-4" Outlined="true">
        <MudTable Items="@memberViewAll" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<Lib_ManageMemberViewAllModel,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
            <ToolBarContent>
                <MudText Typo="Typo.h6">View All Members</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh Class="text-center">Member ID</MudTh>
                <MudTh Class="text-center">Role</MudTh>
                <MudTh Class="text-center">Phone No.</MudTh>
                <MudTh Class="text-center">Credit</MudTh>
                <MudTh Class="text-center">Credit Used</MudTh>
                <MudTh Class="text-center">Credit Remaining</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Member ID" Class="text-center">@context.MemberId</MudTd>
                    <MudTd DataLabel="Role" Class="text-center">@context.Role</MudTd>
                    <MudTd DataLabel="Phone No." Class="text-center">@context.HandPhoneNo</MudTd>
                    <MudTd DataLabel="Credit" Class="text-center">$@context.CreditAmount</MudTd>
                    <MudTd DataLabel="Credit Used" Class="text-center">$@context.CreditUsed</MudTd>
                    <MudTd DataLabel="Credit Remaining" Class="text-center">$@context.CreditRemaining</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
         </MudPaper>
         </MudContainer>



    @code{
    private string searchString = "";
    private Lib_ManageMemberViewAllModel selectedItem = null;
    private List<Lib_ManageMemberViewAllModel> memberViewAll = new List<Lib_ManageMemberViewAllModel>();
    private string? currentUserId = "";
    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        currentUserId = AuthStateTask.Result.User.Identity.Name;
        var names = await memberData.GetChildIdsOfMember(currentUserId);

        foreach (var name in names)
        {
            Lib_ManageMemberViewAllModel viewData = new Lib_ManageMemberViewAllModel();
            viewData = await memberData.GetDisplayDetailsOfMember(name);
            memberViewAll.Add(viewData);
        }
    }

    private bool FilterFunc(Lib_ManageMemberViewAllModel element) => FilterFunc(element, searchString);

    private bool FilterFunc(Lib_ManageMemberViewAllModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.MemberId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.HandPhoneNo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    }