@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using DamienPlayground.Components.Pages.FormDemo
@using DamienPlaygroundLibrary.Data
@using DamienPlaygroundLibrary.Models
@using DisneyPlayhouseAppLibrary.Models

@inject IDialogService DialogService
@inject IInvoiceData invoiceData
@inject NavigationManager NavigationManager

@page "/FixedDateBGTaskDemo"

@if (ReadyForChecking == false)
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                <BettingFormControl TotalBigAmount="@TotalBig" TotalSmallAmount="@TotalSmall" TotalInvoiceAmount="@TotalCost" OnValidateForm="CheckFormValidation" SubmitDisabled="@SubmissionDisabled"
                            OnPageNameAndPurchaseForSet="UpdatePageNameAndPurchaseFor" OnSubmitCheck="ProceedToCheckEntries" OnResetForm="ResetForm"></BettingFormControl>
        <MudPaper Elevation="2" Class="pa-4 ma-2 mb-12" Outlined="true">
            <MudGrid>
                @for (int i = 0; i < Entries.Count; i += 3)
                {
                    <FixedDateBetsFormFields ColId="@i" ValueChangedUpdate="UpdateFixedDateBetForm" entryCol="Entries[i]"></FixedDateBetsFormFields>
                    <FixedDateBetsFormFields ColId="@(i+1)" ValueChangedUpdate="UpdateFixedDateBetForm" entryCol="Entries[(i+1)]"></FixedDateBetsFormFields>
                    <FixedDateBetsFormFields ColId="@(i+2)" ValueChangedUpdate="UpdateFixedDateBetForm" entryCol="Entries[(i+2)]"></FixedDateBetsFormFields>
                }
            </MudGrid>
        </MudPaper>
    </MudContainer>
}
@if (ReadyForChecking == true)
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        <MudPaper Elevation="1" Class="pa-6 mb-8">
            <MudGrid Class="mb-2">
                <MudItem xs="12">
                    <MudToolBar>
                        <MudButton Variant="Variant.Filled" Size="Size.Large" StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Error" OnClick="Back">Back</MudButton>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled" Size="Size.Large" EndIcon="@Icons.Material.Filled.Send" Color="Color.Success" OnClick="SaveInvoiceToFixedDateBet">Submit</MudButton>
                    </MudToolBar>
                </MudItem>
                <MudItem xs="12">
                    <MudAlert NoIcon="true" Severity="Severity.Normal" Variant="Variant.Filled">You are currently checking Fixed Date Bet for Member <MudChip Icon="@Icons.Material.Filled.Person" Size="Size.Large" Label="true" Color="Color.Primary">@PurchaseForId</MudChip>. Please confirm and double check <u><b>ALL</b></u> Inputs before submission.</MudAlert>
                    </MudItem>
                </MudGrid>
                <FixedDateBetsDetailsForChecking Entries="Entries" TotalBigForCheck="@TotalBig" TotalSmallForCheck="@TotalSmall" TotalCostForCheck="@TotalCost"></FixedDateBetsDetailsForChecking>
            </MudPaper>
        </MudContainer>
}

@code {
    public List<Lib_BettingFormIndividualRowEntry> Entries = Enumerable.Range(0, 150).Select(_ => new Lib_BettingFormIndividualRowEntry()).ToList();
    private Lib_FixedBetInvoiceDataModel EntryInvoice = new Lib_FixedBetInvoiceDataModel();
    private string TotalBig;
    private double TBig;
    private string TotalSmall;
    private int TSmall;
    private string TotalCost;
    private double TCost;
    private int ListIndex = 1;
    private bool PageNameValid = false;
    private string PageName;
    private string PurchaseForId;
    private string PurchaseById;
    private bool ReadyForChecking = false;
    private List<string> ValidationErrors = new List<string>();
    private bool SubmissionDisabled = true;
    private string InvoiceId = "";
    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PurchaseById = AuthStateTask.Result.User.Identity.Name;
    }

    private async Task UpdateFixedDateBetForm((Lib_BettingFormIndividualRowEntry, int) entry)
    {
        SubmissionDisabled = true;
        Entries[entry.Item2] = entry.Item1;
        //Check if repeating numbers to prevent user from setting "I" or "R" roll
        if (Entries[entry.Item2].Number.Length == 4 && Entries[entry.Item2].Number.Distinct().Count() < 2 && (Entries[entry.Item2].Roll == "R" || Entries[entry.Item2].Roll == "I"))
        {
            Entries[entry.Item2].Roll = "";
        }

        //Populate the Entries with secondary data such as calculation of costs, etc and check if the entry is valid
        if (Entries[entry.Item2].Number.Length == 4 && (Entries[entry.Item2].Big > 0 || Entries[entry.Item2].Small > 0))
        {
            Entries[entry.Item2].isValidEntry = true;
            List<int> variations = CalculateVariations(Entries[entry.Item2].Number, Entries[entry.Item2].Roll);
            Entries[entry.Item2].NumberVariations = variations.Select(x => x.ToString()).ToList();
            Entries[entry.Item2].DrawDates = GetDrawDatesForEntry(Int32.Parse(Entries[entry.Item2].Day));
            if (Entries[entry.Item2].Roll != "I")
            {
                Entries[entry.Item2].ActualBig = Entries[entry.Item2].Big * Entries[entry.Item2].NumberVariations.Count * Entries[entry.Item2].DrawDates.Count;
                Entries[entry.Item2].ActualBigPerDrawDate = Entries[entry.Item2].Big * Entries[entry.Item2].NumberVariations.Count;
                Entries[entry.Item2].ActualSmall = Entries[entry.Item2].Small * Entries[entry.Item2].NumberVariations.Count * Entries[entry.Item2].DrawDates.Count;
                Entries[entry.Item2].ActualSmallPerDrawDate = Entries[entry.Item2].Small * Entries[entry.Item2].NumberVariations.Count;
            }
            if (Entries[entry.Item2].Roll == "I")
            {
                Entries[entry.Item2].ActualBig = Entries[entry.Item2].Big * Entries[entry.Item2].DrawDates.Count;
                Entries[entry.Item2].ActualBigPerDrawDate = Entries[entry.Item2].Big;
                Entries[entry.Item2].ActualSmall = Entries[entry.Item2].Small * Entries[entry.Item2].DrawDates.Count;
                Entries[entry.Item2].ActualSmallPerDrawDate = Entries[entry.Item2].Small;
            }
            Entries[entry.Item2].BigCostForEntry = Entries[entry.Item2].ActualBig * 1.6;
            Entries[entry.Item2].SmallCostForEntry = Entries[entry.Item2].ActualSmall * 0.7;
            Entries[entry.Item2].TotalCostForEntry = Entries[entry.Item2].BigCostForEntry + Entries[entry.Item2].SmallCostForEntry;
            Entries[entry.Item2].TotalCostForEntryPerDrawDate = (Entries[entry.Item2].ActualBigPerDrawDate * 1.6) + (Entries[entry.Item2].ActualSmallPerDrawDate * 0.7);
        }
        if (Entries[entry.Item2].Number.Length != 4 && (Entries[entry.Item2].Big > 0 || Entries[entry.Item2].Small > 0))
        {
            Entries[entry.Item2].ActualBig = 0;
            Entries[entry.Item2].ActualSmall = 0;
            Entries[entry.Item2].TotalCostForEntry = 0.00;
            Entries[entry.Item2].ActualBigPerDrawDate = 0;
            Entries[entry.Item2].ActualSmallPerDrawDate = 0;
            Entries[entry.Item2].BigCostForEntry = 0.00;
            Entries[entry.Item2].SmallCostForEntry = 0.00;
            Entries[entry.Item2].TotalCostForEntryPerDrawDate = 0.00;
            Entries[entry.Item2].NumberVariations.Clear();
            Entries[entry.Item2].DrawDates.Clear();

            Entries[entry.Item2].isValidEntry = false;
        }
        if (Entries[entry.Item2].Number == "" && Entries[entry.Item2].Big == 0 && Entries[entry.Item2].Small == 0)
        {
            Entries[entry.Item2].isValidEntry = true;
        }
        //calculation for display for entries that are valid
        foreach (var entries in Entries)
        {
            TotalBig = Entries.Where(x => x.isValidEntry).Sum(x => x.ActualBig).ToString();
            TotalSmall = Entries.Where(x => x.isValidEntry).Sum(x => x.ActualSmall).ToString();
            TotalCost = Entries.Where(x => x.isValidEntry).Sum(x => x.TotalCostForEntry).ToString("0.00");
            TBig = Entries.Where(x => x.isValidEntry).Sum(x => x.ActualBig);
            TSmall = Entries.Where(x => x.isValidEntry).Sum(x => x.ActualSmall);
            TCost = Entries.Where(x => x.isValidEntry).Sum(x => x.TotalCostForEntry);
        }
    }

    private void UpdatePageNameAndPurchaseFor((string pageName, string purchaseForId) value)
    {
        PageName = value.pageName;
        PurchaseForId = value.purchaseForId;
        if (PageName != "")
        {
            PageNameValid = true;
        }
        else
        {
            PageNameValid = false;
        }
    }

    private async Task CheckFormValidation()
    {
        ValidationErrors.Clear();

        if (PurchaseForId == "")
        {
            ValidationErrors.Add("Please select a member to purchase for");
        }
        if (PageNameValid == false)
        {
            ValidationErrors.Add("Please enter a page name");
        }
        //First Entry cannot be empty
        if ((Entries[0].Number.Length != 4 && (Entries[0].Big != 0 || Entries[0].Small != 0)) || (Entries[0].Number.Length == 4 && (Entries[0].Big == 0 && Entries[0].Small == 0)) || Entries[0].Number.Length < 4)
        {
            ValidationErrors.Add("Entry No.1 cannot be empty or invalid!");
        }

        for (int i = 0; i < Entries.Count; i++)
        {
            if (Entries[i].Number.Length != 4 && (Entries[i].Big > 0 || Entries[i].Small > 0))
            {
                ValidationErrors.Add("Entry No." + (i + 1) + " is invalid. Please check!");
            }
        }
        var parameters = new DialogParameters<ValidationDialog>();
        parameters.Add(x => x.ValidationErrors, ValidationErrors);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        DialogService.Show<ValidationDialog>("Validation Result", parameters, options);

        if (ValidationErrors.Count == 0)
        {
            SubmissionDisabled = false;
        }
        else
        {
            SubmissionDisabled = true;
        }
    }

    //Calculation for Number Variations
    private List<int> CalculateVariations(string number, string roll)
    {
        List<int> variations = new List<int>();
        switch (roll)
        {
            case "":
            case null:
                variations.Add(int.TryParse(number, out int parsedNumber) ? parsedNumber : 0);

                break;

            case "F":
                string numStrF = number;
                int lastDigitF = int.Parse(number.Substring(3, 1));
                numStrF = numStrF.Substring(0, 3);
                PermuteWithNoDuplicates(variations, numStrF.ToCharArray(), 0, 2);
                variations = variations.Select(v => int.Parse(v.ToString() + lastDigitF)).ToList();
                break;

            case "B":
                string numStrB = number;
                int firstDigitB = int.Parse(numStrB.Substring(0, 1));
                numStrB = numStrB.Substring(1, 3);
                PermuteWithNoDuplicates(variations, numStrB.ToCharArray(), 0, 2);
                variations = variations.Select(v => int.Parse(firstDigitB.ToString() + v.ToString())).ToList();
                break;

            case "R":
            case "I":
                PermuteWithNoDuplicates(variations, number.ToCharArray(), 0, 3);
                break;
        }
        return variations;
    }
    private void PermuteWithNoDuplicates(List<int> variations, char[] arr, int left, int right)
    {
        if (left == right)
        {
            int permutation = int.Parse(new string(arr));
            if (!variations.Contains(permutation))
            {
                variations.Add(permutation);
            }
        }
        else
        {
            for (int i = left; i <= right; i++)
            {
                Swap(ref arr[left], ref arr[i]);
                PermuteWithNoDuplicates(variations, arr, left + 1, right);
                Swap(ref arr[left], ref arr[i]); // backtrack
            }
        }
    }
    private void Swap(ref char a, ref char b)
    {
        char temp = a;
        a = b;
        b = temp;
    }

    //Calculation for Number Draw Dates
    private List<DateTime> GetDrawDatesForEntry(int input)
    {
        List<DateTime> dates = new List<DateTime>();
        DayOfWeek currentDay = DateTime.Now.DayOfWeek;
        TimeSpan currentTime = DateTime.Now.TimeOfDay;

        switch (input)
        {
            case 1:
                if (currentDay == DayOfWeek.Monday || currentDay == DayOfWeek.Tuesday)
                {
                    dates.Add(GetNextWeekday(DayOfWeek.Wednesday));
                    dates.Add(GetNextWeekday(DayOfWeek.Saturday));
                    dates.Add(GetNextWeekday(DayOfWeek.Sunday));
                }
                else if (currentDay == DayOfWeek.Wednesday && currentTime < new TimeSpan(16, 30, 0))
                {
                    dates.Add(GetNextWeekday(DayOfWeek.Wednesday));
                    dates.Add(GetNextWeekday(DayOfWeek.Saturday));
                    dates.Add(GetNextWeekday(DayOfWeek.Sunday));
                }
                else if (currentDay == DayOfWeek.Wednesday && currentTime >= new TimeSpan(16, 30, 0))
                {
                    dates.Add(GetNextWeekday(DayOfWeek.Wednesday, 7));
                    dates.Add(GetNextWeekday(DayOfWeek.Saturday));
                    dates.Add(GetNextWeekday(DayOfWeek.Sunday));
                }
                else if (currentDay == DayOfWeek.Thursday || currentDay == DayOfWeek.Friday)
                {
                    dates.Add(GetNextWeekday(DayOfWeek.Wednesday));
                    dates.Add(GetNextWeekday(DayOfWeek.Saturday));
                    dates.Add(GetNextWeekday(DayOfWeek.Sunday));
                }
                else if (currentDay == DayOfWeek.Saturday && currentTime < new TimeSpan(16, 30, 0))
                {
                    dates.Add(GetNextWeekday(DayOfWeek.Saturday));
                    dates.Add(GetNextWeekday(DayOfWeek.Wednesday));
                    dates.Add(GetNextWeekday(DayOfWeek.Sunday));
                }
                else if (currentDay == DayOfWeek.Sunday && currentTime < new TimeSpan(16, 30, 0))
                {
                    dates.Add(GetNextWeekday(DayOfWeek.Sunday));
                }
                else if (currentDay == DayOfWeek.Sunday && currentTime >= new TimeSpan(16, 30, 0))
                {
                    dates.Add(GetNextWeekday(DayOfWeek.Wednesday));
                    dates.Add(GetNextWeekday(DayOfWeek.Saturday));
                    dates.Add(GetNextWeekday(DayOfWeek.Sunday, 7));
                }
                break;

            case 2:
                dates.Add(GetNextWeekday(DayOfWeek.Saturday));
                dates.Add(GetNextWeekday(DayOfWeek.Sunday));
                break;

            case 3:
                dates.Add(GetNextWeekday(DayOfWeek.Wednesday));
                break;

            case 6:
                dates.Add(GetNextWeekday(DayOfWeek.Saturday));
                break;

            case 7:
                dates.Add(GetNextWeekday(DayOfWeek.Sunday));
                break;

            default:
                break;
        }
        return dates;
    }
    private static DateTime GetDayInCurrentWeek(DateTime currentDate, DayOfWeek targetDay)
    {
        int daysUntilTargetDay = ((int)targetDay - (int)currentDate.DayOfWeek + 7) % 7;
        return currentDate.AddDays(daysUntilTargetDay);
    }
    private static DateTime GetNextWeekDay(DateTime currentDate, DayOfWeek targetDay)
    {
        int daysUntilTargetDay = ((int)targetDay - (int)currentDate.DayOfWeek + 7) % 7;
        return currentDate.AddDays(daysUntilTargetDay + 7);
    }
    private static DateTime GetNextWeekday(DayOfWeek day, int offset = 0)
    {
        int daysUntil = ((int)day - (int)DateTime.Now.DayOfWeek + 7) % 7 + offset;
        return DateTime.Now.Date.AddDays(daysUntil);
    }

    private async Task ProceedToCheckEntries()
    {
        ReadyForChecking = true;
    }

    private async Task Back()
    {
        PageNameValid = false;
        SubmissionDisabled = true;
        PurchaseForId = "";
        PageName = "";
        ReadyForChecking = false;
    }

    private void ResetForm()
    {
        NavigationManager.NavigateTo("/FixedDateBGTaskDemo", true);
    }

    private async Task SaveInvoiceToFixedDateBet()
    {
        string dayAbbreviation = DateTime.Now.ToString("ddd").ToUpper();
        string dateFormatted = DateTime.Now.ToString("yyyyMMdd");
        Random generator = new Random();
        String r = generator.Next(0, 1000000).ToString("D6");
        InvoiceId = $"FixedBet-{dayAbbreviation}-{dateFormatted}-{r}-{PageName}";

        try
        {
            for (int i = 0; i < Entries.Count; i++)
            {
                if(Entries[i].Number.Length == 4 && (Entries[i].Big > 0 || Entries[i].Small > 0))
                {
                    await invoiceData.CreateFixedDateBetEntry(Entries[i], PurchaseById, PurchaseForId, PageName, DateTime.Now, InvoiceId);
                }
            }

            EntryInvoice.InvoiceId = InvoiceId;
            EntryInvoice.PageName = PageName;
            EntryInvoice.TotalBig = TBig;
            EntryInvoice.TotalSmall = TSmall;
            EntryInvoice.TotalAmount = TCost;
            EntryInvoice.PurchasedById = PurchaseById;
            EntryInvoice.PurchasedForId = PurchaseForId;
            EntryInvoice.LastUpdatedOn = DateTime.Now;

            await invoiceData.CreateFixedDateBetInvoice(EntryInvoice);
        }
    catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        NavigationManager.NavigateTo("/FixedDateBGTaskDemo", true);
    }
}