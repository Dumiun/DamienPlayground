@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using DamienPlayground.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in Account</PageTitle>

<div class="row mt-6">
    <div class="col-md-1"></div>
    <div class="col-md-10">
        <h1 class="text-dark display-4">Authentication Demo</h1>
        <div class="alert alert-warning" role="alert">
            Please refer to the <a href="">"About The Demo"</a> page for more information on the purpose of this page."
        </div>
        <hr />
    </div>
</div>
<div class="row justify-content-centeratio" style="margin-top:5vh;">
    <div class="col-md-4">
    </div>
    <div class="col-md-4 text-center">
        <img src="images/working.png" class="mb-5" style="width:25%; height:auto;">
        <h5>Welcome to Damien's Playground!</h5>
    </div>
    <div class="col-md-4">
    </div>
</div>
<div class="row justify-content-center">
    <div class="col-md-4">
    </div>
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.MemberId" class="form-control" autocomplete="username" aria-required="true" />
                    <label for="email" class="form-label">Member ID</label>
                    <ValidationMessage For="() => Input.MemberId" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="w-100 mt-5 btn btn-lg btn-success">Log in</button>
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-md-4">
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.MemberId, Input.Password, false, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string MemberId { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}
